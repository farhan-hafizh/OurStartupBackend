package user

import (
	"errors"
	"fmt"
	"ourstartup/entities"

	"golang.org/x/crypto/bcrypt"
)

// service used for interacting with handlers
type Service interface {
	RegisterUser(input RegisterUserInput) (entities.User, error)
	Login(input LoginUserInput) (entities.User, error)
	IsEmailAvailable(input CheckEmailInput) (bool, error)
	SaveAvatar(id int, fileLocation string) (entities.User, error)
	GetUserById(id int) (entities.User, error)
	GetUserByUsername(username string) (entities.User, error)
}

type service struct {
	repository Repository
}

// constructor
func CreateService(repository Repository) *service {
	return &service{repository}
}

func (s *service) RegisterUser(input RegisterUserInput) (entities.User, error) {
	// create object user
	user := entities.User{}
	user.Name = input.Name
	user.Email = input.Email
	user.Occupation = input.Occupation
	user.Username = input.Username

	// create password hash with converted string to byte input password and cost
	password, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)

	if err != nil {
		return user, err
	}
	// set user password from generated byte hash password
	user.Password = string(password)

	user.Role = "user"

	newUser, err := s.repository.Save(user)

	if err != nil {
		return newUser, err
	}

	return newUser, nil
}

func (s *service) Login(input LoginUserInput) (entities.User, error) {

	query := input.Query
	password := input.Password

	user, err := s.repository.FindByQuery(query)

	if err != nil {
		return user, err
	}

	if user.Id == 0 {
		return user, errors.New("entities.User not found...")
	}

	err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password))

	if err != nil {
		return user, errors.New("Email or password are incorect...")
	}

	return user, nil
}

func (s *service) IsEmailAvailable(input CheckEmailInput) (bool, error) {

	user, err := s.repository.FindByQuery(input.Email)

	if err != nil {
		return false, err
	}
	// user not found
	if user.Id == 0 {
		return true, nil
	}
	// user not found
	return true, nil
}

func (s *service) SaveAvatar(id int, fileLocation string) (entities.User, error) {
	//find user by id
	user, err := s.repository.FindById(id)

	if err != nil {
		return user, err
	}
	// assign user avatar file location with current location
	user.AvatarFileName = fileLocation
	// update the user
	updatedUser, err := s.repository.Update(user)

	if err != nil {
		return updatedUser, err
	}

	return updatedUser, nil

}

func (s *service) GetUserById(id int) (entities.User, error) {
	user, err := s.repository.FindById(id)

	if err != nil {
		return user, errors.New(fmt.Sprintf("No user found with id: %d", id))
	}

	return user, nil
}

func (s *service) GetUserByUsername(username string) (entities.User, error) {
	user, err := s.repository.FindByQuery(username)

	if err != nil {
		return user, errors.New(fmt.Sprintf("No user found with username: %s", username))
	}

	return user, nil
}
